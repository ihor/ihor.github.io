<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ihor Burlachenko</title>
    <link>http://ihor.burlachenko.com/index.xml</link>
    <description>Recent content on Ihor Burlachenko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://ihor.burlachenko.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Code sharing between React and React Native applications</title>
      <link>http://ihor.burlachenko.com/code-sharing-between-react-and-react-native-applications/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ihor.burlachenko.com/code-sharing-between-react-and-react-native-applications/</guid>
      <description>

&lt;p&gt;Sharing code between the web and native was one of the most interesting React Native questions since its appearance. It wasn&amp;rsquo;t the original goal of the React Native but when all our code base is written in one language it&amp;rsquo;s a natural desire to remove code duplication and reuse as much code as possible.&lt;/p&gt;

&lt;p&gt;The approach I&amp;rsquo;m going to explain is based on the fact that React Native loads a platform specific Javascript modules based on their extensions. In the official documentation it is called &lt;a href=&#34;https://facebook.github.io/react-native/docs/platform-specific-code.html#platform-specific-extensions&#34;&gt;platform-specific extensions&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React Native will detect when a file has a .ios. or .android. extension and load the relevant platform file when required from other components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It also detects &lt;code&gt;.native&lt;/code&gt; extensions which can be used when iOS and Android code looks the same.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s see how to use this knowledge to create a cross-platform application which reuses as much code as possible.&lt;/p&gt;

&lt;h3 id=&#34;example-application&#34;&gt;Example application&lt;/h3&gt;

&lt;p&gt;To explain the approach I&amp;rsquo;m going to use a simple example application with one scene (page) which contains a title, &amp;lsquo;About&amp;rsquo; button and &amp;lsquo;Help&amp;rsquo; button. I&amp;rsquo;m going to put code examples here in the article but you can also checkout the &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample&#34;&gt;sources&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-to-start&#34;&gt;How to start?&lt;/h3&gt;

&lt;p&gt;It is easier to begin with a React Native skeleton generated by &lt;code&gt;react-native init&lt;/code&gt; command. It will create entry points for iOS and Android applications. In the generated project we need to create an &lt;code&gt;index.web.js&lt;/code&gt; file which will be an entry point for the web application and the &lt;code&gt;web&lt;/code&gt; directory to contain the web specific files: HTML, CSS, javascript, assets, etc. All our application code will reside in the &lt;code&gt;app&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Assuming that the root component of our application will be called &lt;code&gt;App&lt;/code&gt;, our &lt;code&gt;index.web.js&lt;/code&gt; will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;

import App from &#39;./app/components/App&#39;;
ReactDOM.render(&amp;lt;App/&amp;gt;, document.getElementById(&#39;root&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;index.ios.js&lt;/code&gt; and &lt;code&gt;index.android.js&lt;/code&gt; in our example will look the same:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;
import { AppRegistry } from &#39;react-native&#39;;

import App from &#39;./app/components/App&#39;;
AppRegistry.registerComponent(&#39;ReactNativeCodeReuse&#39;, () =&amp;gt; App);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s go through the different component types and see what their implementation could be.&lt;/p&gt;

&lt;h3 id=&#34;simple-components-with-no-logic&#34;&gt;Simple components with no logic&lt;/h3&gt;

&lt;p&gt;Components with no logic are basically views. Since the web and native use different components for UI, we don&amp;rsquo;t have much choice except providing separate views for each platform.&lt;/p&gt;

&lt;p&gt;In our example application, we have the &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample/tree/master/app/components/Title&#34;&gt;Title&lt;/a&gt; component which only displays a formatted title.&lt;/p&gt;

&lt;p&gt;The following web specific code goes into &lt;code&gt;TitleView.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default () =&amp;gt;
    &amp;lt;h1 className=&amp;quot;title&amp;quot;&amp;gt;
        React Native Code Reuse (Web)
    &amp;lt;/h1&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iOS code goes into &lt;code&gt;TitleView.ios.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default () =&amp;gt;
    &amp;lt;Text style={styles.title}&amp;gt;
        React Native Code Reuse (iOS)
    &amp;lt;/Text&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Android code goes into&lt;code&gt;TitleView.android.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default () =&amp;gt;
    &amp;lt;Text style={styles.title}&amp;gt;
        React Native Code Reuse (Android)
    &amp;lt;/Text&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note, that we are using a &lt;a href=&#34;https://facebook.github.io/react/docs/components-and-props.html#functional-and-class-components&#34;&gt;functional components&lt;/a&gt; syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, in the package &lt;code&gt;index.js&lt;/code&gt;, we import the view and export it back to the outer world. React Native will import the correct module based on its extension. In this way the implementation details will be hidden from the component user, which is good.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import TitleView from &#39;./TitleView&#39;;
export default TitleView;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the app we&amp;rsquo;ll see different title text for the web and iOS:
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;http://ihor.burlachenko.com/img/code-reuse/simple-components.png&#34; alt=&#34;Titles are different&#34; title=&#34;Titles are different&#34;/&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;You can check the component sources &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample/tree/master/app/components/Title&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;components-with-logic&#34;&gt;Components with logic&lt;/h3&gt;

&lt;p&gt;For components which contain some internal logic, it is very natural to use &lt;a href=&#34;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&#34;&gt;presentational and container components&lt;/a&gt; approach. We put the logic, which should be common for all platforms, into the container component and provide different views for each platform, like we did previously for simple components with no logic.&lt;/p&gt;

&lt;p&gt;In our example, you can see that this approach was used for the &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample/tree/master/app/components/App&#34;&gt;App&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;However, I&amp;rsquo;m going to show a little bit more complicated case when we have platform specific code in a container. In our example, it&amp;rsquo;s the &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample/tree/master/app/components/AboutButton&#34;&gt;About Button&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;We have to process &lt;code&gt;onClick&lt;/code&gt; event differently for the web and native. The simple solution to the problem is to use an abstract class.&lt;/p&gt;

&lt;p&gt;So we are going to have an abstract container &lt;code&gt;AbstractAboutButtonContainer.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default class AbstractAboutButtonContainer extends React.Component {
    constructor(props) {
        super(props);
        this.onClick = this.onClick.bind(this);
    }

    onClick() {
        throw new TypeError(&#39;Abstract method onClick is not implemented&#39;);
    }

    render() {
        return &amp;lt;AboutButtonView onClick={this.onClick}/&amp;gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Container for the web &lt;code&gt;AboutButtonContainer.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default class AboutButtonContainer extends AbstractAboutButtonContainer {
    onClick() {
        alert(&#39;This is an example application to show how to reuse code between React and React Native&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Container for native &lt;code&gt;AboutButtonContainer.native.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Alert } from &#39;react-native&#39;;

export default class AboutButtonContainer extends AbstractAboutButtonContainer {
    onClick() {
        Alert.alert(&#39;This is an example application to show how to reuse code between React and React Native&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Web view &lt;code&gt;AboutButtonView.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default props =&amp;gt;
    &amp;lt;button className=&amp;quot;button&amp;quot; onClick={props.onClick}&amp;gt;
        About
    &amp;lt;/button&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Native view &lt;code&gt;AboutButtonView.native.js&lt;/code&gt; (note that we providing only one view for both iOS and Android platforms):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default props =&amp;gt;
    &amp;lt;Button
        onPress={props.onClick}
        style={styles.buttonText}
        containerStyle={styles.button}&amp;gt;
        About
    &amp;lt;/Button&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As earlier, in the component &lt;code&gt;index.js&lt;/code&gt; we import the container and export it back:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import AboutButtonContainer from &#39;./AboutButtonContainer&#39;;
export default AboutButtonContainer;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the app and click the &amp;lsquo;About&amp;rsquo; button we&amp;rsquo;ll see two different platform specific popups with the about information:
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;http://ihor.burlachenko.com/img/code-reuse/components-with-logic.png&#34; alt=&#34;Platform specific popups&#34; title=&#34;Platform specific popups&#34;/&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;You can see the component sources &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample/tree/master/app/components/AboutButton&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another possible solution for this case is to introduce the &lt;code&gt;alert.js&lt;/code&gt; module which will handle cross-platform functionality internally. But I wanted to show this specific approach with components and it&amp;rsquo;s not easy to come up with ideal synthetic examples.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;components-connected-to-the-redux-store&#34;&gt;Components connected to the Redux store&lt;/h3&gt;

&lt;p&gt;In order to avoid code duplication in connected components, we need to connect them to Redux store in the component &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at the &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample/tree/master/app/components/HelpButton&#34;&gt;Help Button&lt;/a&gt; component which displays a number of help requests made during one application session. We need to provide it with a number of previous &amp;lsquo;Help&amp;rsquo; button clicks which will be stored in the Redux store. Also, we need to pass it an action creator to dispatch the &lt;code&gt;HELP_BUTTON_CLICKED&lt;/code&gt;action and increase the stored value.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll use a similar approach as we just used for the components with logic. The only difference will be in the &lt;code&gt;index.js&lt;/code&gt; file which will contain the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { connect } from &#39;react-redux&#39;;

import { helpRequested } from &#39;../../actions/help-actions&#39;
import { getHelpRequestsNumber } from &#39;../../reducers&#39;;
import HelpButtonContainer from &#39;./HelpButtonContainer&#39;;

class HelpButton extends React.Component {
    render() {
        return (
            &amp;lt;HelpButtonContainer { ...this.props }/&amp;gt;
        );
    }
}

HelpButton.propTypes = {
    helpRequests: PropTypes.number.isRequired,
    helpRequested: PropTypes.func.isRequired,
};

const mapStateToProps = store =&amp;gt; ({
    helpRequests: getHelpRequestsNumber(store),
});

export default connect(mapStateToProps, { helpRequested })(HelpButton)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of simply importing and exporting the container we wrap it in the root &lt;code&gt;HelpButton&lt;/code&gt; component which we connect to Redux.&lt;/p&gt;

&lt;p&gt;Then the same as earlier we are going to have an abstract container &lt;code&gt;AbstractHelpButtonContainer.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default class AbstractHelpButtonContainer extends React.Component {
    constructor(props) {
        super(props);

        this.onClick = this.onClick.bind(this);
    }

    onClick() {
        this.displayMessage(`You asked for help ${this.props.helpRequests + 1} time(s)`);
        this.props.helpRequested();
    }

    displayMessage(message) {
        throw new TypeError(&#39;Abstract method displayMessage is not implemented&#39;);
    }

    render() {
        return &amp;lt;HelpButtonView onClick={this.onClick}/&amp;gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Container for the web &lt;code&gt;HelpButtonContainer.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default class HelpButtonContainer extends AbstractHelpButtonContainer {
    displayMessage(message) {
        alert(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Container for native &lt;code&gt;HelpButtonContainer.native.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default class HelpButtonContainer extends AbstractHelpButtonContainer {
    displayMessage(message) {
        Alert.alert(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Web view &lt;code&gt;AboutButtonView.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default props =&amp;gt;
    &amp;lt;button className=&amp;quot;button&amp;quot; onClick={props.onClick}&amp;gt;
        Help
    &amp;lt;/button&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And native view &lt;code&gt;AboutButtonView.native.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;export default props =&amp;gt;
    &amp;lt;Button
        onPress={props.onClick}
        style={styles.buttonText}
        containerStyle={styles.button}&amp;gt;
        Help
    &amp;lt;/Button&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the app and click the help button two times we&amp;rsquo;ll see that number of clicks is counted:
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;http://ihor.burlachenko.com/img/code-reuse/connected-components.png&#34; alt=&#34;Number of clicks is counted&#34; title=&#34;Number of clicks is counted&#34;/&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;You can see the component sources &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample/tree/master/app/components/HelpButton&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;We analyzed three types of components and specified how to share code between different platforms for each type.&lt;/p&gt;

&lt;p&gt;In real world applications, we will also have actions, reducers, routers, utilities and other services. Most of them will be cross-platform which doesn&amp;rsquo;t require any actions from us. We import and use them as if we were writing code only for one platform.&lt;/p&gt;

&lt;p&gt;For services, which have different implementations depending on the platform, we can use the same solution as we did for components. We create a directory with the web implementation &lt;code&gt;service.js&lt;/code&gt;, native implementation &lt;code&gt;service.native.js&lt;/code&gt; and simply import and export the service back in the &lt;code&gt;index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;http://ihor.burlachenko.com/img/code-reuse/crossplatform-modules.png&#34; height=140 alt=&#34;Cross platform module directory structure&#34; title=&#34;Cross platform module directory structure&#34;/&gt;
&lt;/p&gt;

&lt;p&gt;Some services or components will be present only on particular platforms. In such case, I put them into platform specific subdirectories: &lt;code&gt;app\web&lt;/code&gt; or &lt;code&gt;app\native&lt;/code&gt;, where only platform related code resides.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The approach is very simple and is very easy to use. Instead of having several platform specific applications we have only one cross-platform application. Separating modules based on their functionality instead of a platform makes it very convenient to develop all platforms in parallel.&lt;/p&gt;

&lt;p&gt;The example app is very simplified. It is not following all the best React/React Native practices and shouldn&amp;rsquo;t be used as an example of well-designed React application. The goal was to explain the approach easy for understanding, providing many examples but still keeping it a short read. Some not topic related things weren&amp;rsquo;t explained at all. Some possible complications of given solutions weren&amp;rsquo;t provided (e.g. using of abstract views) but that&amp;rsquo;s something you can figure out yourself based on your particular situation. If you have any questions please check the &lt;a href=&#34;https://github.com/ihor/ReactNativeCodeReuseExample&#34;&gt;sources&lt;/a&gt; or ask me in the comments.&lt;/p&gt;

&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/react-native/docs/platform-specific-code.html#platform-specific-extensions&#34;&gt;Platform-specific extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/react/docs/components-and-props.html#functional-and-class-components&#34;&gt;Functional and class components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0&#34;&gt;Presentational and container components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://redux.js.org/docs/basics/UsageWithReact.html&#34;&gt;Redux usage with React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Deep Linking with React Native</title>
      <link>http://ihor.burlachenko.com/deep-linking-with-react-native/</link>
      <pubDate>Fri, 24 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ihor.burlachenko.com/deep-linking-with-react-native/</guid>
      <description>

&lt;p&gt;Recently I added deep linking integration to one of my projects and I want to share my experience with you. It is a complete guide which covers all the steps and explains how to add deep links both on iOS and Android. In my example, I&amp;rsquo;ll use &lt;a href=&#34;https://github.com/aksonov/react-native-router-flux&#34;&gt;React Native Router Flux&lt;/a&gt;. It is a very nice navigation library and at the moment of writing, I couldn&amp;rsquo;t find anything which I would like more. In case you are using something else, this tutorial still will be useful for you as it doesn&amp;rsquo;t rely on the navigation library but describes how to integrate deep links to your application.&lt;/p&gt;

&lt;h3 id=&#34;what-is-deep-linking&#34;&gt;What is deep linking?&lt;/h3&gt;

&lt;p&gt;Deep links allow us to link to specific screens in a mobile application rather than simply launching the app. &lt;a href=&#34;fb://profile/4&#34;&gt;fb://profile/4&lt;/a&gt; is an example of a deep link. If you have Facebook installed on your phone try opening that link. It will launch the Facebook application and show you Mark Zuckerberg&amp;rsquo;s profile.&lt;/p&gt;

&lt;h3 id=&#34;example-application&#34;&gt;Example application&lt;/h3&gt;

&lt;p&gt;I prepared a example application which has two screens. On the first one we are offered to enter our name. When we submit it we are taken to the second screen where we can see a greeting message. Our goal will be to allow deep links with parametrized names to the greeting screen. You can check the sources &lt;a href=&#34;https://github.com/ihor/ReactNativeDeepLinkingExample&#34;&gt;here&lt;/a&gt;.
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;http://ihor.burlachenko.com/img/deeplinking/example-app.gif&#34; alt=&#34;Sample Application&#34; title=&#34;Example application&#34; height=500/&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;deep-linking-with-react-native&#34;&gt;Deep linking with React Native&lt;/h3&gt;

&lt;p&gt;In order to process incoming links in our React application, we need to use &lt;a href=&#34;https://facebook.github.io/react-native/docs/linking.html&#34;&gt;Linking API&lt;/a&gt; from React Native. According to the official docs, to handle initial URL which was used to open our application we can use the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;Linking
    .getInitialURL()
    .then(url =&amp;gt; handleOpenURL({ url }))
    .catch(console.error);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To handle incoming URLs when the app is running in background we have to attach a listener which will be called when such event occurs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;Linking.addEventListener(&#39;url&#39;, handleOpenURL);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;handleOpenURL&lt;/code&gt; has to navigate us to the corresponding scene based on URL which it will receive with the event. I&amp;rsquo;ll use &lt;a href=&#34;https://millermedeiros.github.io/crossroads.js/&#34;&gt;crossroads&lt;/a&gt; to parse the route. This routing library does too much for such simple application, but it might become very useful when your application gets bigger:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;let scheme = &#39;exampleapp&#39;;
handleOpenURL(event) {
    if (event.url &amp;amp;&amp;amp; event.url.indexOf(scheme + &#39;://&#39;) === 0) {
        crossroads.parse(event.url.slice(scheme.length + 3));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can put this code anywhere we want. For our example project let&amp;rsquo;s create a new &lt;a href=&#34;https://github.com/ihor/ReactNativeDeepLinkingExample/blob/master/app/components/LinkedRouter.js&#34;&gt;LinkedRouter&lt;/a&gt; component and listen for incoming links at &lt;code&gt;componentDidMount&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;
import { Linking } from &#39;react-native&#39;;
import { Router } from &#39;react-native-router-flux&#39;;

class LinkedRouter extends React.Component {
    constructor(props) {
        super(props);

        this.handleOpenURL = this.handleOpenURL.bind(this);
    }

    componentDidMount() {
        Linking
            .getInitialURL()
            .then(url =&amp;gt; this.handleOpenURL({ url }))
            .catch(console.error);

        Linking.addEventListener(&#39;url&#39;, this.handleOpenURL);
    }

    componentWillUnmount() {
        Linking.removeEventListener(&#39;url&#39;, this.handleOpenURL);
    }

    handleOpenURL(event) {
        if (event.url &amp;amp;&amp;amp; event.url.indexOf(this.props.scheme + &#39;://&#39;) === 0) {
            crossroads.parse(event.url.slice(this.props.scheme.length + 3));
        }
    }

    render() {
        return &amp;lt;Router { ...this.props }/&amp;gt;;
    }
}

LinkedRouter.propTypes = {
    scheme: React.PropTypes.string.isRequired
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing which is left is mapping incoming URLs to the corresponding scenes. Nice place to add this code is our &lt;a href=&#34;https://github.com/ihor/ReactNativeDeepLinkingExample/blob/master/app/router.js&#34;&gt;router configuration&lt;/a&gt;. Here we assign &lt;code&gt;Greeting&lt;/code&gt; screen to the &lt;code&gt;greetings/{name}&lt;/code&gt; route and pass the &lt;code&gt;name&lt;/code&gt; parameter as the prop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;;
import { Scene, Actions } from &#39;react-native-router-flux&#39;;
import crossroads from &#39;crossroads&#39;;

import LinkedRouter from &#39;./components/LinkedRouter&#39;;
import HomeScreen from &#39;./components/HomeScreen&#39;;
import GreetingScreen from &#39;./components/GreetingScreen&#39;;

const scenes = Actions.create(
    &amp;lt;Scene key=&amp;quot;root&amp;quot;&amp;gt;
        &amp;lt;Scene key=&amp;quot;home&amp;quot; title=&amp;quot;Home&amp;quot; component={HomeScreen} initial={true}/&amp;gt;
        &amp;lt;Scene key=&amp;quot;greeting&amp;quot; title=&amp;quot;Greeting&amp;quot; component={GreetingScreen}/&amp;gt;
    &amp;lt;/Scene&amp;gt;
);

// Mapping incoming URLs to scenes
crossroads.addRoute(&#39;greetings/{name}&#39;, name =&amp;gt; Actions.greeting({ name }));

export default &amp;lt;LinkedRouter scenes={scenes} scheme=&amp;quot;exampleapp&amp;quot;/&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, our React application is ready to handle incoming links. There is a little configuration work left to get it working on iOS and Android.&lt;/p&gt;

&lt;h3 id=&#34;ios-deep-linking&#34;&gt;iOS deep linking&lt;/h3&gt;

&lt;p&gt;On iOS, we&amp;rsquo;ll need to link &lt;code&gt;RCTLinking&lt;/code&gt; library which comes with React Native to our project. For this we&amp;rsquo;ll have to do the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open project &lt;code&gt;*.xcodeproj&lt;/code&gt; with XCode.&lt;/li&gt;
&lt;li&gt;Drag &lt;code&gt;RCTLinking.xcodeproj&lt;/code&gt; from &lt;code&gt;node_modules/react-native/Libraries/LinkingIOS&lt;/code&gt; to the project &lt;code&gt;Libraries&lt;/code&gt;
&lt;p align=&#34;center&#34; style=&#34;padding-top: 10px&#34;&gt;
&lt;img src=&#34;http://ihor.burlachenko.com/img/deeplinking/ios-step-2.png&#34; alt=&#34;Add RCTLinking to the project Libraries&#34; title=&#34;Add RCTLinking to the project Libraries&#34;/&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click on your main project file (the one that represents the .xcodeproj) select &lt;code&gt;Build Phases&lt;/code&gt; and drag the static library from the &lt;code&gt;RTCLinking&lt;/code&gt; &lt;code&gt;Products&lt;/code&gt; folder to &lt;code&gt;Link Binary With Libraries&lt;/code&gt;
&lt;p align=&#34;center&#34; style=&#34;padding-top: 10px&#34;&gt;
&lt;img src=&#34;http://ihor.burlachenko.com/img/deeplinking/ios-step-3.png&#34; alt=&#34;Link RCTLinking with binaries&#34; title=&#34;Link RCTLinking with binaries&#34;/&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click on your main project file again, select &lt;code&gt;Build Settings&lt;/code&gt;, search for &lt;code&gt;Header Search Paths&lt;/code&gt; and put &lt;code&gt;$(SRCROOT)/../node_modules/react-native/Libraries&lt;/code&gt; there
&lt;p align=&#34;center&#34; style=&#34;padding-top: 10px&#34;&gt;
&lt;img src=&#34;http://ihor.burlachenko.com/img/deeplinking/ios-step-4.png&#34; alt=&#34;Add header search path&#34; title=&#34;Add header search path&#34;/&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click on your main project file one more time, select &lt;code&gt;Info&lt;/code&gt; and add a URL type at the bottom. We&amp;rsquo;ll put &lt;code&gt;exampleapp&lt;/code&gt; there.
&lt;p align=&#34;center&#34; style=&#34;padding-top: 10px&#34;&gt;
&lt;img src=&#34;http://ihor.burlachenko.com/img/deeplinking/ios-step-5.png&#34; alt=&#34;Added URL scheme&#34; title=&#34;Added URL scheme&#34;/&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to listen to incoming app links during your app&amp;rsquo;s execution you&amp;rsquo;ll need to add the following lines to the *AppDelegate.m file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt; #import &amp;quot;React/RCTLinkingManager.h&amp;quot;

 - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url
   sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
 {
   return [RCTLinkingManager application:application openURL:url
                       sourceApplication:sourceApplication annotation:annotation];
 }

 // Only if your app is using [Universal Links](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html).
 - (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity
  restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler
 {
  return [RCTLinkingManager application:application
                   continueUserActivity:userActivity
                     restorationHandler:restorationHandler];
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can open Safari and navigate to &lt;code&gt;exampleapp://greetings/World&lt;/code&gt;. You&amp;rsquo;ll be taken to the Greeting screen:
&lt;p align=&#34;center&#34;&gt;
    &lt;img src=&#34;http://ihor.burlachenko.com/img/deeplinking/deeplinking-on-ios.gif&#34; alt=&#34;Deeplinking on iOS&#34; title=&#34;Deeplinking on iOS&#34; height=500/&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;android-deep-linking&#34;&gt;Android deep linking&lt;/h3&gt;

&lt;p&gt;In order to allow deep linking to the content in Android, we need to add intent filters to respond to action requests from other applications. Intent filters are specified in your android manifest located in your React Native project at &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt;. Here is the modified manifest with the intent filter added to the main activity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;activity
    android:name=&amp;quot;.MainActivity&amp;quot;
    android:label=&amp;quot;@string/app_name&amp;quot;
    android:configChanges=&amp;quot;keyboard|keyboardHidden|orientation|screenSize&amp;quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;
        &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;

    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&amp;quot;android.intent.action.VIEW&amp;quot;/&amp;gt;
        &amp;lt;category android:name=&amp;quot;android.intent.category.DEFAULT&amp;quot;/&amp;gt;
        &amp;lt;category android:name=&amp;quot;android.intent.category.BROWSABLE&amp;quot;/&amp;gt;
        &amp;lt;data android:scheme=&amp;quot;exampleapp&amp;quot;
            android:host=&amp;quot;greetings&amp;quot;
            android:pathPrefix=&amp;quot;/&amp;quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/activity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After updating the manifest file you can launch the application on Android Virtual Device and execute the following command in a terminal to test the deep link:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell am start -a android.intent.action.VIEW -d &amp;quot;exampleapp://greetings/World&amp;quot; com.reactnativedeeplinkingexample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same as with iOS application you should see the &amp;ldquo;Hello World&amp;rdquo; message.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s pretty much it. As with many other things with React/React Native it was very easy to add deep links to our example app. I used React Native Router Flux navigation library but as you saw it was all about implementing the &lt;code&gt;handleOpenURL&lt;/code&gt; function and it shouldn&amp;rsquo;t be a problem to add deep linking to your application following steps from this tutorial.&lt;/p&gt;

&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ihor/ReactNativeDeepLinkingExample&#34;&gt;Example Application sources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://facebook.github.io/react-native/docs/linking.html&#34;&gt;React Native Linking documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aksonov/react-native-router-flux&#34;&gt;React Native Router Flux navigation library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://millermedeiros.github.io/crossroads.js/&#34;&gt;Crossroads routing library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ihor.burlachenko.com/about/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ihor.burlachenko.com/about/</guid>
      <description>

&lt;h3 id=&#34;hey-i-m-ihor&#34;&gt;Hey, I&amp;rsquo;m Ihor&lt;/h3&gt;

&lt;p&gt;I’m a full-stack software engineer working mostly with PHP stack on back-end and React/React Native on client-side. I have a solid background in developing complex business logic, solving performance problems and managing teams. With over 10 years of experience, I learned how to deliver a high-quality product and meet business needs.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m available for onsite work in Wroclaw, Poland and for remote contracting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://c1.staticflickr.com/1/368/19023083332_79e9b1c861_z.jpg&#34; alt=&#34;Family Photo&#34; title=&#34;Family Photo&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://ihor.burlachenko.com/license/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ihor.burlachenko.com/license/</guid>
      <description>

&lt;h3 id=&#34;content-license&#34;&gt;Content license&lt;/h3&gt;

&lt;p&gt;All non-code blog content is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons BY-NC-SA&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-license&#34;&gt;Code license&lt;/h3&gt;

&lt;p&gt;All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Copyright 2017 Ihor Burlachenko

Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>